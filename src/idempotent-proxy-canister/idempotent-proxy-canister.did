type Agent = record {
  proxy_token : opt text;
  endpoint : text;
  name : text;
  max_cycles : nat64;
};
type CanisterHttpRequestArgument = record {
  url : text;
  method : HttpMethod;
  max_response_bytes : opt nat64;
  body : opt blob;
  transform : opt TransformContext;
  headers : vec HttpHeader;
};
type ChainArgs = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type CoseClient = record { id : principal; namespace : text };
type HttpHeader = record { value : text; name : text };
type HttpMethod = variant { get; head; post };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type InitArgs = record {
  service_fee : nat64;
  ecdsa_key_name : text;
  cose : opt CoseClient;
  proxy_token_refresh_interval : nat64;
  subnet_size : nat64;
};
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : StateInfo; Err };
type StateInfo = record {
  proxy_token_public_key : text;
  service_fee : nat64;
  ecdsa_key_name : text;
  managers : vec principal;
  cose : opt CoseClient;
  uncollectible_cycles : nat;
  agents : vec Agent;
  incoming_cycles : nat;
  proxy_token_refresh_interval : nat64;
  subnet_size : nat64;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type TransformContext = record {
  function : func (TransformArgs) -> (HttpResponse) query;
  context : blob;
};
type UpgradeArgs = record {
  service_fee : opt nat64;
  cose : opt CoseClient;
  proxy_token_refresh_interval : opt nat64;
  subnet_size : opt nat64;
};
service : (opt ChainArgs) -> {
  admin_add_caller : (principal) -> (Result);
  admin_remove_caller : (principal) -> (Result);
  admin_set_agents : (vec Agent) -> (Result_1);
  admin_set_managers : (vec principal) -> (Result_1);
  get_state : () -> (Result_2) query;
  parallel_call_all_ok : (CanisterHttpRequestArgument) -> (HttpResponse);
  parallel_call_any_ok : (CanisterHttpRequestArgument) -> (HttpResponse);
  parallel_call_cost : (CanisterHttpRequestArgument) -> (nat) query;
  proxy_http_request : (CanisterHttpRequestArgument) -> (HttpResponse);
  proxy_http_request_cost : (CanisterHttpRequestArgument) -> (nat) query;
  validate_admin_set_agents : (vec Agent) -> (Result_1);
  validate_admin_set_managers : (vec principal) -> (Result_1);
}
